/*-------------------- User Model --------------------*/
/**
 * @swagger
 * components:
 *   schemas:
 *     UserModel:
 *       type: object
 *       required:
 *         - email
 *         - password
 *         - role
 *       properties:
 *         id:
 *           type: string
 *           description: Unique identifier for the user (generated by MongoDB)
 *           example: 64a5f4b2b6a82d2f55f9e7b0
 *         email:
 *           type: string
 *           description: User's email address
 *           example: "user@example.com"
 *         password:
 *           type: string
 *           description: User's password (hashed)
 *           example: "123456"
 *         role:
 *           type: string
 *           description: User's role in the application (e.g., "admin" or "cstomer")
 *           example: "customer"
 *       timestamps:
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Timestamp when the user was created
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Timestamp when the user was last updated
 */

/*-------------------- RegisterDto for register API --------------------*/
/**
 * @swagger
 * components:
 *   schemas:
 *     RegisterDto:
 *       type: object
 *       required:
 *         - email
 *         - password
 *         - role
 *       properties:
 *         name:
 *           type: string
 *           description: User's Name
 *           example: "Nguyen Van A"
 *         email:
 *           type: string
 *           description: User's email address
 *           example: "user@example.com"
 *         password:
 *           type: string
 *           description: User's password (hashed)
 *           example: "123456"
 *         role:
 *           type: string
 *           description: User's role in the application (e.g., "admin" or "customer")
 *           example: "customer"
 *       timestamps:
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Timestamp when the user was created
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Timestamp when the user was last updated
 */

/*-------------------- LoginDTO for register API --------------------*/
// LoginDto for login API
/**
 * @swagger
 * components:
 *   schemas:
 *     LoginDto:
 *       type: object
 *       required:
 *         - email
 *         - password
 *       properties:
 *         email:
 *           type: string
 *           description: User's email address
 *           example: "user@example.com"
 *         password:
 *           type: string
 *           description: User's password (hashed)
 *           example: "123456"
 */

/*-------------------- Auth DTO --------------------*/
/**
 * @swagger
 * components:
 *   schemas:
 *     AuthDto:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: MongoDB ID of the user.
 *           example: 60d0fe4f5311236168a109ca
 *         email:
 *           type: string
 *           description: User's email address.
 *           example: "user@example.com"
 *         password:
 *           type: string
 *           description: User's password.
 *           example: "securePassword123"
 *         role:
 *           type: string
 *           description: User's role in the system.
 *           example: "admin"
 */


/*-------------------- Register Account API --------------------*/
/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Register a new user
 *     description: Creates a new user in the system with an email, password, and role.
 *     tags:
 *       - Authentication
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RegisterDto'
 *     responses:
 *       201:
 *         description: User registered successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/RegisterDto'
 *       400:
 *         description: Bad request - validation error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Validation error message"
 */

/*-------------------- Login API --------------------*/
/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Logs in a user and returns a token
 *     tags:
 *       - Authentication
 *     requestBody:
 *       description: User credentials for login
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/LoginDto'
 *     responses:
 *       200:
 *         description: Successful login with JWT token
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 user:
 *                   type: object
 *                   description: The user object containing login info
 *                   example:
 *                     _id: "60b8c3a4930f5b0f35f3b413"
 *                     email: "user@example.com"
 *                     role: "customer"
 *                 token:
 *                   type: string
 *                   description: JWT token
 *                   example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
 *       400:
 *         description: Bad request or invalid credentials
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Invalid email or password"
 */



/*-------------------- Update user API --------------------*/
/**
 * @swagger
 * /api/auth/{id}:
 *   put:
 *     summary: Update a 
 *     tags:
 *       - Authentication
 *     description: Update a user's account by their ID.
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: The ID of the user to update
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/AuthDto'
 *     responses:
 *       200:
 *         description: The updated user data.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 _id:
 *                   type: string
 *                   example: "60d0fe4f5311236168a109ca"
 *                 email:
 *                   type: string
 *                   example: "updated_user@example.com"
 *                 role:
 *                   type: string
 *                   example: "user"
 *       404:
 *         description: User not found.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "User not found"
 *       500:
 *         description: Server error.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "An error occurred while updating the user."
 */

/*-------------------- Delete account API --------------------*/
/**
 * @swagger
 * /api/auth/{id}:
 *   delete:
 *     summary: Delete a user by ID
 *     tags:
 *       - Authentication
 *     description: Delete a account user from the system using the provided user ID.
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: The ID of the user to be deleted.
 *         schema:
 *           type: string
 *           example: "507f1f77bcf86cd799439011"
 *     responses:
 *       200:
 *         description: User deleted successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "User deleted successfully"
 *       404:
 *         description: User not found.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "User not found"
 *       500:
 *         description: Server error while deleting user.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "An error occurred while deleting the user."
 */


/*-------------------- Send otp to email API --------------------*/
/**
 * @swagger
 * /api/auth/send-verification:
 *   get:
 *     summary: Send a verification email
 *     tags:
 *       - Authentication
 *     description: Sends a verification email to the provided email address.
 *     parameters:
 *       - in: query
 *         name: email
 *         required: true
 *         schema:
 *           type: string
 *         description: The email address to send the verification email to.
 *     responses:
 *       200:
 *         description: A success message indicating the email was sent.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Verification email sent successfully"
 *       400:
 *         description: Email is required.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Email are required."
 *       500:
 *         description: Server error when sending the verification email.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "An error occurred while sending the verification email."
 */


/*-------------------- Verify otp/email --------------------*/
/**
 * @swagger
 * /api/auth/verify:
 *   post:
 *     summary: Verify OTP for email
 *     tags:
 *       - Authentication
 *     description: Verify the OTP sent to the user's email address for confirmation.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email address of the user.
 *                 example: "user@example.com"
 *               otp:
 *                 type: string
 *                 description: The OTP sent to the user's email address.
 *                 example: "123456"
 *     responses:
 *       200:
 *         description: OTP successfully verified.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "OTP verified successfully"
 *       400:
 *         description: Invalid OTP or OTP expired or already used.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Invalid or expired OTP or OTP is used!"
 *       500:
 *         description: Server error during OTP verification.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "An error occurred while verifying the OTP."
 */